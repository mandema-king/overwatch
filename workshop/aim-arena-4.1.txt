settings
{
	main
	{
		Description: "Practice vs. dummy bots that continuously strafe but only attack once injured."
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Spectators: 6
		Max Team 2 Players: 0
		Return To Lobby: Never
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Hero Limit: Off
			Respawn Time Scalar: 49%
		}
	}

	heroes
	{
		Team 2
		{
			Mercy
			{
				Weapons Enabled: Caduceus Staff Only
			}

			Torbj√∂rn
			{
				Deploy Turret: Off
			}

			disabled heroes
			{
				Echo
			}
		}
	}
}

variables
{
	global:
		0: game_name
		1: match_time
		2: clear_hud_notifications_interval
		3: hud_notification_sort_order

	player:
		0: hud_notification_text_ids
}

subroutines
{
	0: AddLastHudTextIdToNotifications
}

rule("Workshop Settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.match_time = Workshop Setting Integer(Custom String("General"), Custom String("Match time [minutes]"), 15, 1, 30, 0);
		Global.clear_hud_notifications_interval = Workshop Setting Integer(Custom String("General"), Custom String(
			"Clear HUD notification interval [seconds]"), 5, 5, 20, 1);
	}
}

rule("GLOBAL initialize")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Match Time(Global.match_time * 60);
		Global.game_name = Custom String("Aim Arena 4.1");
		Global.hud_notification_sort_order = 1000;
	}
}

rule("PLAYER initialize")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Global.game_name, Null, Null, Left, 0, Color(Purple), Color(White), Color(White), String,
			Default Visibility);
		Create HUD Text(Event Player, Custom String("'{0}' emote for Immortality", String("Healing")), Null, Null, Left, 1, Color(Team 1),
			Color(White), Color(White), String, Default Visibility);
		Create HUD Text(Event Player, Custom String("'{0}' emote to switch heroes", String("Interact")), Null, Null, Left, 1, Color(
			Team 1), Color(White), Color(White), String, Default Visibility);
	}
}

rule("BOT create")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Cassidy), Team 2, 0, Global.P[1], Vector(0, 0, 0));
		Create Dummy Bot(Hero(Pharah), Team 2, 1, Global.P[2], Vector(0, 0, 0));
		Create Dummy Bot(Hero(Mercy), Team 2, 2, Global.P[2], Vector(0, 0, 0));
		Create Dummy Bot(Hero(Ashe), Team 2, 3, Global.P[3], Global.T[1]);
		Create Dummy Bot(Hero(Genji), Team 2, 4, Global.P[5], Vector(0, 0, 0));
		Create Dummy Bot(Hero(Reinhardt), Team 2, 5, Global.P[0], Global.T[1]);
	}
}

rule("BOT turn and shoot")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Ashe);
		Hero Of(Event Player) != Hero(Widowmaker);
		Hero Of(Event Player) != Hero(Ana);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Attacker)), 400, To World,
			Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(4, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("BOT jump")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is On Ground(Event Player) == True;
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Baptiste);
	}

	actions
	{
		Wait(Random Real(1, 3), Ignore Condition);
		Press Button(Event Player, Button(Jump));
	}
}

rule("BOT crouch")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is On Ground(Event Player) == True;
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Baptiste);
		Hero Of(Event Player) != Hero(Wrecking Ball);
	}

	actions
	{
		Wait(Random Real(1, 3), Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Loop;
	}
}

rule("BOT stop holding buttons")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Ability 1));
		Stop Holding Button(Event Player, Button(Ability 2));
	}
}

rule("BOT says hello BM")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(0.900, Ignore Condition);
		Press Button(Event Player, Button(Crouch));
		Wait(0.900, Ignore Condition);
		Press Button(Event Player, Button(Crouch));
		Wait(1, Ignore Condition);
		Communicate(Event Player, Hello);
		Stop Throttle In Direction(Event Player);
	}
}

rule("RBOT E")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.600;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("RBOT shift")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.750;
		Hero Of(Event Player) != Hero(Wrecking Ball);
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(0.900, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("RBOT strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.500, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.500, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop;
	}
}

rule("REIN swap")
{
	event
	{
		Player Died;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(2.400, Ignore Condition);
		Teleport(Event Player, Global.P[0]);
		Start Forcing Player To Be Hero(Event Player, Random Value In Array(All Heroes));
	}
}

rule("RBOT W")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Attacker) >= 10;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(3, Ignore Condition);
		Stop Throttle In Direction(Event Player);
	}
}

rule("CASSIDY strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("CASSIDY flash")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Attacker) <= 10;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Ability 2));
		Stop Forcing Throttle(Event Player);
		Loop If Condition Is True;
	}
}

rule("CASSIDY roll")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.600;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("CASSIDY swap")
{
	event
	{
		Player Died;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(2.400, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, All Heroes);
	}
}

rule("CASSIDY MOIRA dmg")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Hero Being Played(Hero(Moira), Team 2) == True;
	}

	actions
	{
		disabled Skip If(Normalized Health(Event Player) >= 0.950, 4);
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("CASSIDY BAPTISTE jump")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Hero Being Played(Hero(Baptiste), Team 2) == True;
	}

	actions
	{
		Wait(Random Real(2, 3), Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(2, Ignore Condition);
		Start Holding Button(Event Player, Button(Jump));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Stop Holding Button(Event Player, Button(Jump));
		Loop If Condition Is True;
	}
}

rule("CASSIDY SYMMETRA dmg")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("PHARAH take off")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Is In Air(Event Player) || Is Moving(Event Player)) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("PHARAH air strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(1, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(1, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("PHARAH control jets")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Wait(0.775, Ignore Condition);
		Start Holding Button(Event Player, Button(Jump));
		Wait(0.775, Ignore Condition);
		Stop Holding Button(Event Player, Button(Jump));
		Loop If Condition Is True;
	}
}

rule("PHARAH thrusters")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("PHARAH shoot")
{
	event
	{
		Player Took Damage;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Attacker), 500, To World, Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(5, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("PHARAH after rez")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Moving(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("PHARAH mad")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 2;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Players In Slot(1, Team 2), Direction Towards(Eye Position(Players In Slot(1, Team 2)), Attacker), 600, To World,
			Direction and Turn Rate);
		Start Holding Button(Players In Slot(1, Team 2), Button(Primary Fire));
		Wait(5, Ignore Condition);
		disabled Stop Facing(Players On Hero(Hero(Pharah), Team 2));
		Stop Holding Button(Players In Slot(1, Team 2), Button(Primary Fire));
		Press Button(Players In Slot(1, Team 2), Button(Ability 2));
	}
}

rule("MERCY stare")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Players In Slot(1, Team 2)), 400, To World,
			Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("MERCY fly to")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Players In Slot(1, Team 2)) >= 10;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Ability 1));
		Wait(Random Real(2, 3.500), Ignore Condition);
		Stop Holding Button(Event Player, Button(Ability 1));
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Jump));
		Wait(Random Real(1.500, 2.500), Ignore Condition);
		Stop Holding Button(Event Player, Button(Jump));
		Loop If Condition Is True;
	}
}

rule("MERCY strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.500, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.500, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop;
	}
}

rule("MERCY movement")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Players On Hero(Hero(Pharah), Team 2)) >= 8;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(1.500, 2.500), Ignore Condition);
		disabled Stop Throttle In Direction(Event Player);
		Loop If Condition Is True;
	}
}

rule("MERCY damage boost")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) >= 0.800;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Players In Slot(2, Team 2), Button(Secondary Fire));
		Press Button(Players On Hero(Hero(Mercy), Team 2), Button(Ultimate));
		Wait(0.500, Ignore Condition);
		Stop Holding Button(Players On Hero(Hero(Mercy), Team 2), Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("MERCY rez")
{
	event
	{
		Player Died;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Players On Hero(Hero(Mercy), Team 2), Event Player) <= 6;
	}

	actions
	{
		Start Throttle In Direction(Players In Slot(2, Team 2), Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Start Holding Button(Players In Slot(2, Team 2), Button(Ability 2));
		Start Holding Button(Players In Slot(2, Team 2), Button(Jump));
		Wait(3, Ignore Condition);
		Stop Holding Button(Players In Slot(2, Team 2), Button(Ability 2));
		Stop Holding Button(Players In Slot(2, Team 2), Button(Jump));
		Stop Throttle In Direction(Players In Slot(2, Team 2));
		Loop If Condition Is True;
	}
}

rule("ASHE dynamite")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.600;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("ASHE strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop;
	}
}

rule("ASHE facing")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Attacker)), 400, To World,
			Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(5, Ignore Condition);
		disabled Stop Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("ASHE shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.950;
		Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Closest Player To(Event Player, Team 1)), All Players(Team 1),
			Event Player, True) == True;
		Hero Of(Event Player) != Hero(Hanzo);
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("HANZO shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.950;
		Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Closest Player To(Event Player, Team 1)), All Players(Team 1),
			Event Player, True) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ASHE swap")
{
	event
	{
		Player Died;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(2.400, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, All Heroes);
	}
}

rule("GENJI look")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Attacker)), 600, To World,
			Direction and Turn Rate);
		Press Button(Event Player, Button(Jump));
		Wait(1, Ignore Condition);
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(1, Ignore Condition);
		Stop Throttle In Direction(Event Player);
	}
}

rule("GENJI strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("GENJI deflect")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.500;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("GENJI right clicks")
{
	event
	{
		Player Took Damage;
		Team 2;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Attacker) <= 8;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Event Player, Button(Secondary Fire));
		Press Button(Event Player, Button(Ability 1));
		Wait(3, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("GENJI double jump")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Wait(Random Real(2, 3), Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Wait(0.500, Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Loop;
	}
}

rule("GENJI swap")
{
	event
	{
		Player Died;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Stop Holding Button(Players In Slot(4, Team 2), Button(Secondary Fire));
		Wait(2.400, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, All Heroes);
		Skip If(Hero Of(Event Player) == Hero(Genji), 1);
		Stop Forcing Player To Be Hero(Event Player);
	}
}

rule("DOOM look")
{
	event
	{
		Player Took Damage;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Attacker), 600, To World, Direction and Turn Rate);
		Press Button(Event Player, Button(Jump));
		Wait(3, Ignore Condition);
	}
}

rule("DOOM e")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Firing Secondary(Event Player) == False;
		Distance Between(Event Player, Player Closest To Reticle(Event Player, Team 1)) <= 20;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(4, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("DOOM shift")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Firing Secondary(Event Player) == False;
		Distance Between(Event Player, Player Closest To Reticle(Event Player, Team 1)) <= 8;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(3, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("DOOM punch")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Hero(Genji);
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(3, Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Stop Throttle In Direction(Event Player);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("DOOM ult")
{
	event
	{
		Player Took Damage;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.300;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("PLAYER self-kill (e.g. to switch hero)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Kill(Event Player, Null);
	}
}

rule("PLAYER toggle immortality")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Communicating(Event Player, Need Healing) == True;
	}

	actions
	{
		If(Has Status(Event Player, Unkillable));
			Clear Status(Event Player, Unkillable);
			Big Message(Event Player, Custom String("Immortality: off"));
			Create HUD Text(Event Player, Null, Null, Custom String("You are no longer immortal"), Left, Global.hud_notification_sort_order,
				Color(White), Color(White), Color(Yellow), Visible To and String, Default Visibility);
			Call Subroutine(AddLastHudTextIdToNotifications);
		Else;
			Set Status(Event Player, Null, Unkillable, 9999);
			Big Message(Event Player, Custom String("Immortality: on"));
			Create HUD Text(Event Player, Null, Null, Custom String("You are now immortal"), Left, Global.hud_notification_sort_order, Color(
				White), Color(White), Color(White), Visible To and String, Default Visibility);
			Call Subroutine(AddLastHudTextIdToNotifications);
	}
}

rule("PLAYER leech 50% dmg done")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Heal(Event Player, Event Player, Event Damage / 2);
	}
}

rule("Add last HUD Text ID to player notification array")
{
	event
	{
		Subroutine;
		AddLastHudTextIdToNotifications;
	}

	actions
	{
		Modify Player Variable(Event Player, hud_notification_text_ids, Append To Array, Last Text ID);
	}
}

rule("Remove HUD notifications")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		While(Count Of(Event Player.hud_notification_text_ids));
			Destroy HUD Text(Event Player.hud_notification_text_ids[0]);
			Modify Player Variable(Event Player, hud_notification_text_ids, Remove From Array By Index, 0);
		End;
		Wait(Global.clear_hud_notifications_interval, Ignore Condition);
		Loop;
	}
}

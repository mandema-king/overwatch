settings
{
	main
	{
		Description: "Practice vs. dummy bots that continuously strafe but only attack once injured."
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Spectators: 6
		Max Team 2 Players: 0
		Return To Lobby: Never
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Hero Limit: Off
			Respawn Time Scalar: 49%
		}
	}

	heroes
	{
		Team 1
		{
			disabled heroes
			{
				Torbj√∂rn
			}
		}

		Team 2
		{
			Mercy
			{
				Weapons Enabled: Caduceus Staff Only
			}

			disabled heroes
			{
				Echo
			}
		}
	}
}

variables
{
	global:
		0: game_name
		1: match_time
		2: hud_clear_notifications_interval
		3: hud_notifications_sort_order
		4: death_animation_time
		5: targeting_interval
		6: show_damage_dealt_notifications
		7: show_damage_taken_notifications
		8: competitive_mode_enabled
		9: passive_bots_enabled
		10: hero_death_threshold
		11: hud_player_help_sort_order
		12: hud_player_info_sort_order

	player:
		0: hud_notification_text_ids
		1: allowed_heroes
		3: last_targeted_enemy
		4: distance_to_targeted_enemy
		5: current_hero
		6: primary_fire_max_range
		7: primary_fire_falloff_range
		8: current_hero_deaths
		9: help_text_ids
		10: strafe_duration_min
		11: strafe_duration_max
}

subroutines
{
	0: AddLastHudTextIdToNotifications
}

rule("Workshop settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.match_time = Workshop Setting Integer(Custom String("General"), Custom String("Match time [minutes]"), 15, 1, 30, 10);
		Global.competitive_mode_enabled = Workshop Setting Toggle(Custom String("General"), Custom String("Competitive mode (i.e. 2-2-2)"),
			False, 20);
		Global.passive_bots_enabled = Workshop Setting Toggle(Custom String("General"), Custom String(
			"Passive bots (only attack when injured)"), True, 30);
		Global.hero_death_threshold = Workshop Setting Integer(Custom String("General"), Custom String("Hero death threshold"), 2, 1, 10,
			40);
		Global.targeting_interval = Workshop Setting Real(Custom String("General"), Custom String("Targeting interval [seconds]"), 0.500,
			0.200, 1, 50);
		Global.show_damage_dealt_notifications = Workshop Setting Toggle(Custom String("HUD - Notifications"), Custom String(
			"Show damage dealt notifications"), True, 10);
		Global.show_damage_taken_notifications = Workshop Setting Toggle(Custom String("HUD - Notifications"), Custom String(
			"Show damage taken notifications"), False, 20);
		Global.hud_clear_notifications_interval = Workshop Setting Integer(Custom String("HUD - Notifications"), Custom String(
			"Clear notifications interval [seconds]"), 5, 5, 20, 30);
	}
}

rule("GLOBAL initialize")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Match Time(Global.match_time * 60);
		Global.death_animation_time = 2.400;
		Global.game_name = Custom String("Aim Arena 4.1 - VKG1W");
		Global.hud_notifications_sort_order = 1000;
		Global.hud_player_help_sort_order = 200;
		Global.hud_player_info_sort_order = 100;
	}
}

rule("HUD - game name")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Global.game_name, Null, Null, Top, 0, Color(Purple), Color(White), Color(White), String,
			Visible Always);
	}
}

rule("HUD - scoreboard spacing")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Left, -99999, Color(White), Color(White), Color(White),
			String, Visible Always);
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Left, -99999, Color(White), Color(White), Color(White),
			String, Visible Always);
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Right, -99999, Color(White), Color(White), Color(
			White), String, Visible Always);
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Right, -99999, Color(White), Color(White), Color(
			White), String, Visible Always);
	}
}

rule("HUD - Team 1 scoreboard")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(Team 1), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Event Player)), Event Player,
			Custom String("{0} / {1} / {2}", Player Stat(Event Player, Final Blows), Player Stat(Event Player, Deaths), Player Stat(
			Event Player, Hero Damage Dealt))), Null, Null, Left, Player Stat(Event Player, All Damage Dealt) * -0.010, Has Status(
			Event Player, Unkillable) ? Color(Orange) : Color(White), Color(White), Color(White), Visible To Sort Order String and Color,
			Visible Always);
	}
}

rule("HUD - player info")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Left, Global.hud_player_info_sort_order, Color(White),
			Color(White), Color(White), String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("Targeted enemy: {0}", Hero Of(Event Player.last_targeted_enemy)), Left,
			Global.hud_player_info_sort_order + 10, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("Distance to targeted enemy: {0} m",
			Event Player.distance_to_targeted_enemy), Left, Global.hud_player_info_sort_order + 20, Color(White), Color(White),
			Event Player.distance_to_targeted_enemy <= Event Player.primary_fire_falloff_range ? Color(Green) : (
			Event Player.distance_to_targeted_enemy <= Event Player.primary_fire_max_range ? Color(Yellow) : Color(Red)), String and Color,
			Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("Primary fire maximum range: {0} m", Event Player.primary_fire_max_range),
			Left, Global.hud_player_info_sort_order + 30, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("Primary fire falloff range: {0} m",
			Event Player.primary_fire_falloff_range), Left, Global.hud_player_info_sort_order + 40, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Right, Global.hud_player_info_sort_order + 99, Color(
			White), Color(White), Color(White), String, Default Visibility);
	}
}

rule("HUD - show help")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, String("Help"), Null, Null, Right, Global.hud_player_help_sort_order, Color(Orange), Color(White),
			Color(White), String, Default Visibility);
		Modify Player Variable(Event Player, help_text_ids, Append To Array, Last Text ID);
		If(Global.passive_bots_enabled);
			Create HUD Text(Event Player, Null, Null, Custom String("Enemy team only attacks when injured"), Right,
				Global.hud_player_help_sort_order + 10, Color(White), Color(White), Color(Orange), String, Default Visibility);
			Modify Player Variable(Event Player, help_text_ids, Append To Array, Last Text ID);
		End;
		Create HUD Text(Event Player, Null, Null, Custom String("Emote '{0}' for immortality", String("Healing")), Right,
			Global.hud_player_help_sort_order + 20, Color(White), Color(White), Color(Orange), String, Default Visibility);
		Modify Player Variable(Event Player, help_text_ids, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Null, Null, Custom String("Emote '{0}' to switch heroes", String("Interact")), Right,
			Global.hud_player_help_sort_order + 30, Color(White), Color(White), Color(Orange), String, Default Visibility);
		Modify Player Variable(Event Player, help_text_ids, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Null, Null, Custom String("Emote 'acknowledge' to hide help text"), Right,
			Global.hud_player_help_sort_order + 40, Color(White), Color(White), Color(Orange), String, Default Visibility);
		Modify Player Variable(Event Player, help_text_ids, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Right, Global.hud_player_help_sort_order + 99, Color(
			White), Color(White), Color(White), String, Default Visibility);
	}
}

rule("HUD - hide help")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Acknowledge) == True;
	}

	actions
	{
		While(Count Of(Event Player.help_text_ids));
			Destroy HUD Text(Event Player.help_text_ids[0]);
			Modify Player Variable(Event Player, help_text_ids, Remove From Array By Index, 0);
		End;
	}
}

rule("BOT create")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Cassidy), Team 2, 0, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Pharah), Team 2, 1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Mercy), Team 2, 2, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Ashe), Team 2, 3, Vector(0, 0, 0), Vector(0, 0, 0));
		If(Global.competitive_mode_enabled);
			Create Dummy Bot(Hero(Roadhog), Team 2, 4, Vector(0, 0, 0), Vector(0, 0, 0));
		Else;
			Create Dummy Bot(Hero(Genji), Team 2, 4, Vector(0, 0, 0), Vector(0, 0, 0));
		End;
		Create Dummy Bot(Hero(Reinhardt), Team 2, 5, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

rule("HUD - Team 2 scoreboard")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(Team 1), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Event Player)), String("{0} {1}",
			Custom String("Bot"), Slot Of(Event Player) + 1), Custom String("{0} / {1} / {2}", Player Stat(Event Player, Final Blows),
			Player Stat(Event Player, Deaths), Player Stat(Event Player, Hero Damage Dealt))), Null, Null, Right, Player Stat(Event Player,
			All Damage Dealt) * -0.010, Color(White), Color(White), Color(White), Visible To Sort Order String and Color, Visible Always);
	}
}

rule("HERO configuration")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Hero Of(Event Player) != Event Player.current_hero;
	}

	actions
	{
		Event Player.current_hero = Hero Of(Event Player);
		Event Player.current_hero_deaths = 0;
		If(Array Contains(All Damage Heroes, Event Player.current_hero));
			Event Player.strafe_duration_min = 0.250;
			Event Player.strafe_duration_max = 1;
		Else;
			Event Player.strafe_duration_min = 0.500;
			Event Player.strafe_duration_max = 2;
		End;
		If(Event Player.current_hero == Hero(Ana));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
		Else If(Event Player.current_hero == Hero(Ashe));
			Event Player.primary_fire_falloff_range = 20;
			Event Player.primary_fire_max_range = 40;
		Else If(Event Player.current_hero == Hero(Baptiste));
			Event Player.primary_fire_falloff_range = 25;
			Event Player.primary_fire_max_range = 45;
		Else If(Event Player.current_hero == Hero(Bastion));
			Event Player.primary_fire_falloff_range = 25;
			Event Player.primary_fire_max_range = 45;
		Else If(Event Player.current_hero == Hero(Brigitte));
			Event Player.primary_fire_falloff_range = 20;
			Event Player.primary_fire_max_range = 20;
		Else If(Event Player.current_hero == Hero(Cassidy));
			Event Player.primary_fire_falloff_range = 20;
			Event Player.primary_fire_max_range = 40;
		Else If(Event Player.current_hero == Hero(D.Va));
			Event Player.primary_fire_falloff_range = 10;
			Event Player.primary_fire_max_range = 20;
		Else If(Event Player.current_hero == Hero(Doomfist));
			Event Player.primary_fire_falloff_range = 15;
			Event Player.primary_fire_max_range = 30;
		Else If(Event Player.current_hero == Hero(Echo));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
		Else If(Event Player.current_hero == Hero(Genji));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
		Else If(Event Player.current_hero == Hero(Hanzo));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
		Else If(Event Player.current_hero == Hero(Junkrat));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
		Else If(Event Player.current_hero == Hero(L√∫cio));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
		Else If(Event Player.current_hero == Hero(Mei));
			Event Player.primary_fire_falloff_range = 10;
			Event Player.primary_fire_max_range = 10;
		Else If(Event Player.current_hero == Hero(Mercy));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
		Else If(Event Player.current_hero == Hero(Moira));
			Event Player.primary_fire_falloff_range = 0;
			Event Player.primary_fire_max_range = 0;
		Else If(Event Player.current_hero == Hero(Orisa));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
		Else If(Event Player.current_hero == Hero(Pharah));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
			Event Player.strafe_duration_min = 1;
			Event Player.strafe_duration_max = 2;
		Else If(Event Player.current_hero == Hero(Reaper));
			Event Player.primary_fire_falloff_range = 10;
			Event Player.primary_fire_max_range = 20;
		Else If(Event Player.current_hero == Hero(Reinhardt));
			Event Player.primary_fire_falloff_range = 5;
			Event Player.primary_fire_max_range = 5;
		Else If(Event Player.current_hero == Hero(Roadhog));
			Event Player.primary_fire_falloff_range = 15;
			Event Player.primary_fire_max_range = 30;
		Else If(Event Player.current_hero == Hero(Sigma));
			Event Player.primary_fire_falloff_range = 22;
			Event Player.primary_fire_max_range = 22;
		Else If(Event Player.current_hero == Hero(Soldier: 76));
			Event Player.primary_fire_falloff_range = 30;
			Event Player.primary_fire_max_range = 50;
		Else If(Event Player.current_hero == Hero(Sombra));
			Event Player.primary_fire_falloff_range = 15;
			Event Player.primary_fire_max_range = 35;
		Else If(Event Player.current_hero == Hero(Symmetra));
			Event Player.primary_fire_falloff_range = 12;
			Event Player.primary_fire_max_range = 12;
		Else If(Event Player.current_hero == Hero(Torbj√∂rn));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
		Else If(Event Player.current_hero == Hero(Tracer));
			Event Player.primary_fire_falloff_range = 12;
			Event Player.primary_fire_max_range = 20;
		Else If(Event Player.current_hero == Hero(Widowmaker));
			Event Player.primary_fire_falloff_range = 20;
			Event Player.primary_fire_max_range = 40;
		Else If(Event Player.current_hero == Hero(Winston));
			Event Player.primary_fire_falloff_range = 8;
			Event Player.primary_fire_max_range = 8;
		Else If(Event Player.current_hero == Hero(Wrecking Ball));
			Event Player.primary_fire_falloff_range = 15;
			Event Player.primary_fire_max_range = 25;
		Else If(Event Player.current_hero == Hero(Zarya));
			Event Player.primary_fire_falloff_range = 15;
			Event Player.primary_fire_max_range = 15;
		Else If(Event Player.current_hero == Hero(Zenyatta));
			Event Player.primary_fire_falloff_range = 100;
			Event Player.primary_fire_max_range = 100;
		End;
		Big Message(Event Player, Custom String("Primary fire range: {0}", String("{0} m", Event Player.primary_fire_max_range)));
	}
}

rule("BOT role lock")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		If(Array Contains(All Damage Heroes, Hero Of(Event Player)));
			Event Player.allowed_heroes = Filtered Array(All Damage Heroes, Array Contains(Allowed Heroes(Event Player),
				Current Array Element));
		Else If(Array Contains(All Support Heroes, Hero Of(Event Player)));
			Event Player.allowed_heroes = Filtered Array(All Support Heroes, Array Contains(Allowed Heroes(Event Player),
				Current Array Element));
		Else;
			Event Player.allowed_heroes = Filtered Array(All Tank Heroes, Array Contains(Allowed Heroes(Event Player), Current Array Element));
	}
}

rule("BOT turn and shoot")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Ashe);
		Hero Of(Event Player) != Hero(Widowmaker);
		Hero Of(Event Player) != Hero(Ana);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Attacker)), 400, To World,
			Direction and Turn Rate);
		If(Distance Between(Event Player, Attacker) <= Event Player.primary_fire_max_range);
			Start Holding Button(Event Player, Button(Primary Fire));
			Wait(4, Ignore Condition);
			Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("BOT jump")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is On Ground(Event Player) == True;
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Baptiste);
	}

	actions
	{
		Wait(Random Real(1, 3), Ignore Condition);
		Press Button(Event Player, Button(Jump));
	}
}

rule("BOT crouch")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is On Ground(Event Player) == True;
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Baptiste);
		Hero Of(Event Player) != Hero(Wrecking Ball);
	}

	actions
	{
		Wait(Random Real(1, 3), Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Loop;
	}
}

rule("BOT death")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Event Player.current_hero_deaths += 1;
		Stop Holding Button(Event Player, Button(Primary Fire));
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Stop Holding Button(Event Player, Button(Ability 1));
		Stop Holding Button(Event Player, Button(Ability 2));
		Wait(Global.death_animation_time, Ignore Condition);
		Teleport(Event Player, Vector(0, 0, 0));
		If(Hero Of(Event Player) != Hero(Mercy) && Hero Of(Event Player) != Hero(Pharah));
			If(Event Player.current_hero_deaths >= Global.hero_death_threshold);
				Start Forcing Player To Be Hero(Event Player, Random Value In Array(Event Player.allowed_heroes));
	}
}

rule("BOT says hello BM")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(0.900, Ignore Condition);
		Press Button(Event Player, Button(Crouch));
		Wait(0.900, Ignore Condition);
		Press Button(Event Player, Button(Crouch));
		Wait(1, Ignore Condition);
		Communicate(Event Player, Hello);
		Stop Throttle In Direction(Event Player);
	}
}

rule("RBOT E")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.600;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("RBOT shift")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.750;
		Hero Of(Event Player) != Hero(Wrecking Ball);
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(0.900, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("RBOT strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop;
	}
}

rule("RBOT W")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Attacker) >= 10;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(3, Ignore Condition);
		Stop Throttle In Direction(Event Player);
	}
}

rule("CASSIDY strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("CASSIDY flash")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Attacker) <= 10;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Ability 2));
		Stop Forcing Throttle(Event Player);
		Loop If Condition Is True;
	}
}

rule("CASSIDY roll")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.600;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("CASSIDY MOIRA dmg")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Hero Being Played(Hero(Moira), Team 2) == True;
	}

	actions
	{
		disabled Skip If(Normalized Health(Event Player) >= 0.950, 4);
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("CASSIDY BAPTISTE jump")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Hero Being Played(Hero(Baptiste), Team 2) == True;
	}

	actions
	{
		Wait(Random Real(2, 3), Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(2, Ignore Condition);
		Start Holding Button(Event Player, Button(Jump));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Stop Holding Button(Event Player, Button(Jump));
		Loop If Condition Is True;
	}
}

rule("CASSIDY SYMMETRA dmg")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("PHARAH take off")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Is In Air(Event Player) || Is Moving(Event Player)) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("PHARAH air strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("PHARAH control jets")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Wait(0.775, Ignore Condition);
		Start Holding Button(Event Player, Button(Jump));
		Wait(0.775, Ignore Condition);
		Stop Holding Button(Event Player, Button(Jump));
		Loop If Condition Is True;
	}
}

rule("PHARAH thrusters")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("PHARAH shoot")
{
	event
	{
		Player Took Damage;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Attacker), 500, To World, Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(5, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("PHARAH after rez")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Moving(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("PHARAH mad")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 2;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Players In Slot(1, Team 2), Direction Towards(Eye Position(Players In Slot(1, Team 2)), Attacker), 600, To World,
			Direction and Turn Rate);
		Start Holding Button(Players In Slot(1, Team 2), Button(Primary Fire));
		Wait(5, Ignore Condition);
		disabled Stop Facing(Players On Hero(Hero(Pharah), Team 2));
		Stop Holding Button(Players In Slot(1, Team 2), Button(Primary Fire));
		Press Button(Players In Slot(1, Team 2), Button(Ability 2));
	}
}

rule("MERCY stare")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Players In Slot(1, Team 2)), 400, To World,
			Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("MERCY fly to")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Players In Slot(1, Team 2)) >= 10;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Ability 1));
		Wait(Random Real(2, 3.500), Ignore Condition);
		Stop Holding Button(Event Player, Button(Ability 1));
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Jump));
		Wait(Random Real(1.500, 2.500), Ignore Condition);
		Stop Holding Button(Event Player, Button(Jump));
		Loop If Condition Is True;
	}
}

rule("MERCY strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop;
	}
}

rule("MERCY movement")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Players On Hero(Hero(Pharah), Team 2)) >= 8;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(1.500, 2.500), Ignore Condition);
		disabled Stop Throttle In Direction(Event Player);
		Loop If Condition Is True;
	}
}

rule("MERCY damage boost")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) >= 0.800;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Players In Slot(2, Team 2), Button(Secondary Fire));
		Press Button(Players On Hero(Hero(Mercy), Team 2), Button(Ultimate));
		Wait(0.500, Ignore Condition);
		Stop Holding Button(Players On Hero(Hero(Mercy), Team 2), Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("MERCY rez")
{
	event
	{
		Player Died;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Players On Hero(Hero(Mercy), Team 2), Event Player) <= 6;
	}

	actions
	{
		Start Throttle In Direction(Players In Slot(2, Team 2), Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Start Holding Button(Players In Slot(2, Team 2), Button(Ability 2));
		Start Holding Button(Players In Slot(2, Team 2), Button(Jump));
		Wait(3, Ignore Condition);
		Stop Holding Button(Players In Slot(2, Team 2), Button(Ability 2));
		Stop Holding Button(Players In Slot(2, Team 2), Button(Jump));
		Stop Throttle In Direction(Players In Slot(2, Team 2));
		Loop If Condition Is True;
	}
}

rule("ASHE dynamite")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.600;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("ASHE strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop;
	}
}

rule("ASHE facing")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Attacker)), 400, To World,
			Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(5, Ignore Condition);
		disabled Stop Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("RBOT primary fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Hero(Hanzo);
		(Global.passive_bots_enabled == False || Normalized Health(Event Player) <= 0.950) == True;
		Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Closest Player To(Event Player, Team 1)), All Living Players(Team 1),
			Event Player, True) == True;
		Distance Between(Event Player, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))))
			<= Event Player.primary_fire_max_range;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("HANZO shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.950;
		Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Closest Player To(Event Player, Team 1)), All Players(Team 1),
			Event Player, True) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("BOT ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Hero(Doomfist);
		Hero Of(Event Player) != Hero(Mercy);
		Ultimate Charge Percent(Event Player) == 100;
		(Global.passive_bots_enabled == False || Normalized Health(Event Player) <= 0.950) == True;
		Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Closest Player To(Event Player, Team 1)), All Living Players(Team 1),
			Event Player, True) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("GENJI look")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Attacker)), 600, To World,
			Direction and Turn Rate);
		Press Button(Event Player, Button(Jump));
		Wait(1, Ignore Condition);
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(1, Ignore Condition);
		Stop Throttle In Direction(Event Player);
	}
}

rule("GENJI strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.strafe_duration_min, Event Player.strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("GENJI deflect")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.500;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("GENJI right clicks")
{
	event
	{
		Player Took Damage;
		Team 2;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Attacker) <= 8;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Event Player, Button(Secondary Fire));
		Press Button(Event Player, Button(Ability 1));
		Wait(3, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("GENJI double jump")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Wait(Random Real(2, 3), Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Wait(0.500, Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Loop;
	}
}

rule("DOOM look")
{
	event
	{
		Player Took Damage;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Attacker), 600, To World, Direction and Turn Rate);
		Press Button(Event Player, Button(Jump));
		Wait(3, Ignore Condition);
	}
}

rule("DOOM e")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Firing Secondary(Event Player) == False;
		Distance Between(Event Player, Player Closest To Reticle(Event Player, Team 1)) <= 20;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(4, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("DOOM shift")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Firing Secondary(Event Player) == False;
		Distance Between(Event Player, Player Closest To Reticle(Event Player, Team 1)) <= 8;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(3, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("DOOM punch")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Hero(Genji);
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(3, Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Stop Throttle In Direction(Event Player);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("DOOM ult")
{
	event
	{
		Player Took Damage;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.300;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("PLAYER dealt damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	actions
	{
		If(Global.show_damage_dealt_notifications);
			Create HUD Text(Event Player, Null, Null, Custom String("{0} Damage dealt: {1} {2}", Event Was Critical Hit ? String("Critical")
				: String(""), Event Damage, Event Ability != Null ? String("({0})", Event Ability) : String("")), Left,
				Global.hud_notifications_sort_order, Color(White), Color(White), Event Was Critical Hit ? Color(Red) : Color(White),
				Visible To and String, Default Visibility);
			Call Subroutine(AddLastHudTextIdToNotifications);
	}
}

rule("PLAYER took damage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	actions
	{
		If(Global.show_damage_taken_notifications);
			Create HUD Text(All Players(Team 1), Null, Null, Custom String("{0} took {1} damage: {2}", Is Dummy Bot(Event Player) ? Hero Of(
				Event Player) : Event Player, Event Was Critical Hit ? String("Critical") : String(""), Event Damage), Left,
				Global.hud_notifications_sort_order, Color(White), Color(White), Event Was Critical Hit ? Color(Red) : Color(White),
				Visible To and String, Default Visibility);
			Call Subroutine(AddLastHudTextIdToNotifications);
	}
}

rule("PLAYER self-kill (e.g. to switch hero)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Kill(Event Player, Null);
	}
}

rule("PLAYER toggle immortality")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Communicating(Event Player, Need Healing) == True;
	}

	actions
	{
		If(Has Status(Event Player, Unkillable));
			Clear Status(Event Player, Unkillable);
			Big Message(Event Player, Custom String("Immortality: off"));
			Create HUD Text(All Players(Team 1), Null, Null, Custom String("{0} is no longer immortal", Event Player), Left,
				Global.hud_notifications_sort_order, Color(White), Color(White), Color(Yellow), Visible To and String, Default Visibility);
			Call Subroutine(AddLastHudTextIdToNotifications);
		Else;
			Set Status(Event Player, Null, Unkillable, 9999);
			Big Message(Event Player, Custom String("Immortality: on"));
			Create HUD Text(All Players(Team 1), Null, Null, Custom String("{0} is now immortal", Event Player), Left,
				Global.hud_notifications_sort_order, Color(White), Color(White), Color(Yellow), Visible To and String, Default Visibility);
			Call Subroutine(AddLastHudTextIdToNotifications);
	}
}

rule("PLAYER leech 50% dmg done")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Heal(Event Player, Event Player, Event Damage / 2);
	}
}

rule("PLAYER targeting")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.last_targeted_enemy = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
		Event Player.distance_to_targeted_enemy = Distance Between(Eye Position(Event Player), Event Player.last_targeted_enemy);
		Wait(Global.targeting_interval, Ignore Condition);
		Loop;
	}
}

rule("Add last HUD Text ID to player notification array")
{
	event
	{
		Subroutine;
		AddLastHudTextIdToNotifications;
	}

	actions
	{
		Modify Player Variable(Event Player, hud_notification_text_ids, Append To Array, Last Text ID);
	}
}

rule("Remove HUD notifications")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		While(Count Of(Event Player.hud_notification_text_ids));
			Destroy HUD Text(Event Player.hud_notification_text_ids[0]);
			Modify Player Variable(Event Player, hud_notification_text_ids, Remove From Array By Index, 0);
		End;
		Wait(Global.hud_clear_notifications_interval, Ignore Condition);
		Loop;
	}
}

settings
{
	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Limit Roles: 2 Of Each Role Per Team
		}
	}
}

variables
{
	global:
		0: game_name
		1: team_1_spawn_direction
		2: team_2_spawn_direction
		3: team_1_spawn_positions
		4: team_2_spawn_positions
		5: targeting_interval
		6: bot_turn_rate

	player:
		0: bot_targeted_enemy
		1: primary_fire_cooldown
		2: primary_fire_max_range
}

rule("Workshop settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.bot_turn_rate = Workshop Setting Integer(Custom String("General"), Custom String("Bot turn rate"), 400, 200, 1000, 20);
		Global.targeting_interval = Workshop Setting Real(Custom String("General"), Custom String("Targeting interval [seconds]"), 0.500,
			0.200, 1, 10);
	}
}

rule("Initialize global variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.game_name = Custom String("Targeting Bot Trainer");
		Global.team_1_spawn_direction = Vector(-1, 0, 0);
		Global.team_2_spawn_direction = Vector(1, 0, 0);
		Global.team_1_spawn_positions[0] = Vector(15, 0, 0);
		Global.team_1_spawn_positions[1] = Vector(15, 0, -1);
		Global.team_1_spawn_positions[2] = Vector(15, 0, 1);
		Global.team_1_spawn_positions[3] = Vector(16, 0, 0);
		Global.team_1_spawn_positions[4] = Vector(16, 0, -1);
		Global.team_1_spawn_positions[5] = Vector(16, 0, 1);
		Global.team_2_spawn_positions[0] = Vector(-15, 0, 0);
		Global.team_2_spawn_positions[1] = Vector(-15, 0, -1);
		Global.team_2_spawn_positions[2] = Vector(-15, 0, 1);
		Global.team_2_spawn_positions[3] = Vector(-16, 0, 0);
		Global.team_2_spawn_positions[4] = Vector(-16, 0, -1);
		Global.team_2_spawn_positions[5] = Vector(-16, 0, 1);
	}
}

rule("Create bots")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Hero(Cassidy), Team 2, 0, Global.team_2_spawn_positions[0], Global.team_2_spawn_direction);
	}
}

rule("Initialize player variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Event Player.bot_targeted_enemy = Null;
	}
}

rule("Configure hero properties - Cassidy")
{
	event
	{
		Ongoing - Each Player;
		All;
		Cassidy;
	}

	actions
	{
		Event Player.primary_fire_cooldown = 0.500;
		Event Player.primary_fire_max_range = 40;
	}
}

rule("When bot has spawned, begin targeting enemy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.bot_targeted_enemy == Null;
	}

	actions
	{
		Event Player.bot_targeted_enemy = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
		Wait(Global.targeting_interval, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("When bot has targeted enemy, start facing target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.bot_targeted_enemy != Null;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.bot_targeted_enemy)),
			Global.bot_turn_rate, To World, Direction and Turn Rate);
	}
}

rule("When bot ray cast hits enemy, fire weapon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Hero(Hanzo);
		Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
			* Event Player.primary_fire_max_range, All Living Players(Opposite Team Of(Team Of(Event Player))), Event Player, True)
			!= Null;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(Event Player.primary_fire_cooldown, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("HUD - game name")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Global.game_name, Null, Null, Top, 0, Color(Purple), Color(White), Color(White),
			Visible To and String, Visible Always);
	}
}

rule("HUD - scoreboard spacing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Left, -99999, Color(White), Color(White), Color(White),
			String, Visible Always);
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Left, -99999, Color(White), Color(White), Color(White),
			String, Visible Always);
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Right, -99999, Color(White), Color(White), Color(
			White), String, Visible Always);
		Create HUD Text(Event Player, Null, Custom String(" "), Custom String(" "), Right, -99999, Color(White), Color(White), Color(
			White), String, Visible Always);
	}
}

rule("HUD - Team 1 scoreboard")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Event Player)), Is Dummy Bot(
			Event Player) ? String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1) : Event Player, Custom String(
			"{0} / {1} / {2}", Player Stat(Event Player, Final Blows), Player Stat(Event Player, Deaths), Player Stat(Event Player,
			Hero Damage Dealt))), Null, Null, Left, Player Stat(Event Player, All Damage Dealt) * -0.010, Color(White), Color(White),
			Color(White), Visible To Sort Order String and Color, Visible Always);
	}
}

rule("HUD - Team 2 scoreboard")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Event Player)), Is Dummy Bot(
			Event Player) ? String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1) : Event Player, Custom String(
			"{0} / {1} / {2}", Player Stat(Event Player, Final Blows), Player Stat(Event Player, Deaths), Player Stat(Event Player,
			Hero Damage Dealt))), Null, Null, Right, Player Stat(Event Player, All Damage Dealt) * -0.010, Color(White), Color(White),
			Color(White), Visible To Sort Order String and Color, Visible Always);
	}
}

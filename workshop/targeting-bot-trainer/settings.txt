settings
{
	main
	{
		Description: "Demonstrates bot targeting of enemy players"
		Mode Name: "Proof of Concept"
	}

	lobby
	{
		Max Team 1 Players: 1
		Max Team 2 Players: 1
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Limit Roles: 2 Of Each Role Per Team
		}
	}

	heroes
	{
		General
		{
			enabled heroes
			{
				Cassidy
			}
		}
	}
}

variables
{
	global:
		0: game_name
		1: team_1_spawn_direction
		2: team_2_spawn_direction
		3: team_1_spawn_positions
		4: team_2_spawn_positions
		5: targeting_interval
		6: bot_turn_rate
		7: hud_notifications_duration
		8: hud_notifications_sort_order
		9: entire_team_kills
		10: bot_passive_mode_enabled
		11: bot_difficulty
		12: bot_headshot_aim_probability

	player:
		0: bot_targeted_enemy
		1: primary_fire_cooldown
		2: primary_fire_max_range
		3: hud_notifications
		4: bot_strafe_duration_max
		5: bot_strafe_duration_min
}

subroutines
{
	0: AddLastTextToPlayerNotifications
}

rule("Workshop settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.bot_difficulty = Workshop Setting Integer(Custom String("General"), Custom String("Bot difficulty"), 5, 1, 5, 10);
		Global.bot_passive_mode_enabled = Workshop Setting Toggle(Custom String("General"), Custom String(
			"Passive bots (only attack when injured)"), False, 20);
		Global.targeting_interval = Workshop Setting Real(Custom String("General"), Custom String("Targeting interval [seconds]"), 0.500,
			0.200, 1, 30);
		Global.hud_notifications_duration = Workshop Setting Integer(Custom String("HUD - Notifications"), Custom String(
			"Notification duration [seconds]"), 5, 5, 20, 10);
	}
}

rule("Initialize global variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.entire_team_kills = Array(0, 0);
		Global.game_name = Custom String("Targeting Bot Trainer");
		Global.hud_notifications_sort_order = 1000;
		Global.team_1_spawn_direction = Vector(-1, 0, 0);
		Global.team_2_spawn_direction = Vector(1, 0, 0);
		Global.team_1_spawn_positions[0] = Vector(15, 0, 0);
		Global.team_1_spawn_positions[1] = Vector(15, 0, -1);
		Global.team_1_spawn_positions[2] = Vector(15, 0, 1);
		Global.team_1_spawn_positions[3] = Vector(16, 0, 0);
		Global.team_1_spawn_positions[4] = Vector(16, 0, -1);
		Global.team_1_spawn_positions[5] = Vector(16, 0, 1);
		Global.team_2_spawn_positions[0] = Vector(-15, 0, 0);
		Global.team_2_spawn_positions[1] = Vector(-15, 0, -1);
		Global.team_2_spawn_positions[2] = Vector(-15, 0, 1);
		Global.team_2_spawn_positions[3] = Vector(-16, 0, 0);
		Global.team_2_spawn_positions[4] = Vector(-16, 0, -1);
		Global.team_2_spawn_positions[5] = Vector(-16, 0, 1);
	}
}

rule("Configure bot difficulty")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		If(Global.bot_difficulty == 1);
			Global.bot_headshot_aim_probability = 10;
			Global.bot_turn_rate = 200;
		Else If(Global.bot_difficulty == 2);
			Global.bot_headshot_aim_probability = 20;
			Global.bot_turn_rate = 250;
		Else If(Global.bot_difficulty == 3);
			Global.bot_headshot_aim_probability = 30;
			Global.bot_turn_rate = 300;
		Else If(Global.bot_difficulty == 4);
			Global.bot_headshot_aim_probability = 40;
			Global.bot_turn_rate = 350;
		Else If(Global.bot_difficulty == 5);
			Global.bot_headshot_aim_probability = 50;
			Global.bot_turn_rate = 400;
	}
}

rule("Create bots")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Hero(Cassidy), Team 2, 0, Global.team_2_spawn_positions[0], Global.team_2_spawn_direction);
	}
}

rule("Initialize player variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.bot_strafe_duration_min = 0.250;
		Event Player.bot_strafe_duration_max = 1;
		If(Global.bot_difficulty <= 3);
			Event Player.bot_strafe_duration_min += Random Real(3 - Global.bot_difficulty, 4 - Global.bot_difficulty);
			Event Player.bot_strafe_duration_max += Random Real(3 - Global.bot_difficulty, 4 - Global.bot_difficulty);
			Event Player.bot_strafe_duration_max = Max(Event Player.bot_strafe_duration_max, Event Player.bot_strafe_duration_min + 1);
		End;
		Event Player.bot_targeted_enemy = Null;
		Event Player.hud_notifications = Empty Array;
	}
}

rule("Configure hero properties - Cassidy")
{
	event
	{
		Ongoing - Each Player;
		All;
		Cassidy;
	}

	actions
	{
		Event Player.primary_fire_cooldown = 0.500;
		Event Player.primary_fire_max_range = 40;
	}
}

rule("When bot has spawned, start strafing left and right")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.bot_strafe_duration_min, Event Player.bot_strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(Event Player.bot_strafe_duration_min, Event Player.bot_strafe_duration_max), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		If(Global.bot_difficulty <= 2);
			Wait(Random Real(4 - Global.bot_difficulty, 6 - Global.bot_difficulty), Ignore Condition);
		End;
		Loop If Condition Is True;
	}
}

rule("When bot has spawned, begin targeting enemy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.bot_targeted_enemy == Null;
	}

	actions
	{
		Event Player.bot_targeted_enemy = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
		If(Event Player.bot_targeted_enemy != Null && Is Dead(Event Player.bot_targeted_enemy));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} is targeting a dead player ({2})", Hero Icon String(
				Hero Of(Event Player)), String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1), Event Player.bot_targeted_enemy),
				Left, Global.hud_notifications_sort_order, Color(White), Color(White), Color(Yellow), None, Visible Always);
			Call Subroutine(AddLastTextToPlayerNotifications);
			Event Player.bot_targeted_enemy = Null;
			Event Player.bot_targeted_enemy = First Of(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(
				Event Player)), 45), Array Contains(All Living Players(Opposite Team Of(Team Of(Event Player))), Current Array Element)));
		End;
		If(Event Player.bot_targeted_enemy);
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} is now targeting {2}", Hero Icon String(Hero Of(
				Event Player)), String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1), Event Player.bot_targeted_enemy), Left,
				Global.hud_notifications_sort_order, Color(White), Color(White), Color(White), None, Visible Always);
			Call Subroutine(AddLastTextToPlayerNotifications);
		End;
		Wait(Global.targeting_interval, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("When bot takes damage, begin targeting attacker")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} took damage from {2}", Hero Icon String(Hero Of(
			Event Player)), String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1), Attacker), Left,
			Global.hud_notifications_sort_order, Color(White), Color(White), Color(Yellow), None, Visible Always);
		Call Subroutine(AddLastTextToPlayerNotifications);
		If(Event Player.bot_targeted_enemy != Attacker);
			Event Player.bot_targeted_enemy = Attacker;
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} is now targeting {2}", Hero Icon String(Hero Of(
				Event Player)), String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1), Event Player.bot_targeted_enemy), Left,
				Global.hud_notifications_sort_order, Color(White), Color(White), Color(White), None, Visible Always);
			Call Subroutine(AddLastTextToPlayerNotifications);
		End;
	}
}

rule("When bot has targeted enemy, start facing target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.bot_targeted_enemy != Null;
	}

	actions
	{
		If(Random Integer(0, 100) <= Global.bot_headshot_aim_probability);
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} is aiming for headshot on {2}", Hero Icon String(
				Hero Of(Event Player)), String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1), Event Player.bot_targeted_enemy),
				Left, Global.hud_notifications_sort_order, Color(White), Color(White), Color(White), None, Visible Always);
			Call Subroutine(AddLastTextToPlayerNotifications);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.bot_targeted_enemy)),
				Global.bot_turn_rate, To World, Direction and Turn Rate);
		Else;
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} is aiming for body shot on {2}", Hero Icon String(
				Hero Of(Event Player)), String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1), Event Player.bot_targeted_enemy),
				Left, Global.hud_notifications_sort_order, Color(White), Color(White), Color(White), None, Visible Always);
			Call Subroutine(AddLastTextToPlayerNotifications);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Event Player.bot_targeted_enemy + Up * (Eye Position(
				Event Player.bot_targeted_enemy) / 2)), Global.bot_turn_rate, To World, Direction and Turn Rate);
		End;
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} has started facing {2}", Hero Icon String(Hero Of(
			Event Player)), String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1), Event Player.bot_targeted_enemy), Left,
			Global.hud_notifications_sort_order, Color(White), Color(White), Color(White), None, Visible Always);
		Call Subroutine(AddLastTextToPlayerNotifications);
	}
}

rule("When bot has no targeted enemy, stop facing target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.bot_targeted_enemy == Null;
	}

	actions
	{
		Stop Facing(Event Player);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} has no targeted enemy", Hero Icon String(Hero Of(
			Event Player)), String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1)), Left, Global.hud_notifications_sort_order,
			Color(White), Color(White), Color(White), None, Visible Always);
		Call Subroutine(AddLastTextToPlayerNotifications);
	}
}

rule("When enemy is within small view angle, fire weapon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Hero(Hanzo);
		(!Global.bot_passive_mode_enabled || Normalized Health(Event Player) <= 0.990) == True;
		Count Of(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 20), Has Spawned(
			Current Array Element) && Is Alive(Current Array Element))) > 0;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(Event Player.primary_fire_cooldown, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("When bot kills targeted enemy, stop targeting")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.bot_targeted_enemy == Victim;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} dealt final blow to targeted enemy ({2})",
			Hero Icon String(Hero Of(Event Player)), String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1), Victim), Left,
			Global.hud_notifications_sort_order, Color(White), Color(White), Color(White), None, Visible Always);
		Call Subroutine(AddLastTextToPlayerNotifications);
		Event Player.bot_targeted_enemy = Null;
	}
}

rule("When bot dies, stop targeting")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} died", Hero Icon String(Hero Of(Event Player)), String(
			"{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1)), Left, Global.hud_notifications_sort_order, Color(White), Color(
			White), Color(White), None, Visible Always);
		Call Subroutine(AddLastTextToPlayerNotifications);
		Event Player.bot_targeted_enemy = Null;
	}
}

rule("When bot sees no living enemies, reload weapon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Ammo(Event Player, 0) < Max Ammo(Event Player, 0);
		Count Of(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 45), Array Contains(
			All Living Players(Opposite Team Of(Team Of(Event Player))), Current Array Element))) == 0;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} sees no enemies...reloading weapon", Hero Icon String(
			Hero Of(Event Player)), String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1)), Left,
			Global.hud_notifications_sort_order, Color(White), Color(White), Color(White), None, Visible Always);
		Call Subroutine(AddLastTextToPlayerNotifications);
		Press Button(Event Player, Button(Reload));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("When all players on a team are dead, increment \"team kills\" for other team")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		(Is True For Any(All Players(Team 1), Has Spawned(Current Array Element)) && Is True For Any(All Players(Team 2), Has Spawned(
			Current Array Element))) == True;
		(Count Of(All Living Players(Team 1)) == 0 || Count Of(All Living Players(Team 2)) == 0) == True;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Team kill"));
		If(Count Of(All Living Players(Team 1)) == 0);
			Global.entire_team_kills[1] += 1;
		End;
		If(Count Of(All Living Players(Team 2)) == 0);
			Global.entire_team_kills[0] += 1;
		End;
		Wait(6, Ignore Condition);
	}
}

rule("When all players on a team are dead, heal players on other team to full health")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		(Is True For Any(All Players(Team 1), Has Spawned(Current Array Element)) && Is True For Any(All Players(Team 2), Has Spawned(
			Current Array Element))) == True;
		(Count Of(All Living Players(Team 1)) == 0 || Count Of(All Living Players(Team 2)) == 0) == True;
	}

	actions
	{
		If(Count Of(All Living Players(Team 1)) == 0);
			Heal(All Players(Team 2), Null, 100000);
		End;
		If(Count Of(All Living Players(Team 2)) == 0);
			Heal(All Players(Team 1), Null, 100000);
		End;
	}
}

rule("Global scoreboard")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Team"), 1), Vector(10, 18, 19.500), 2.500, Do Not Clip,
			Visible To and String, Color(Team 1), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Team kills: {0}", Global.entire_team_kills[0]), Vector(10, 15, 19.500),
			2, Do Not Clip, Visible To and String, Color(Team 1), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Critical hits: {0}", Player Hero Stat(Players In Slot(0, Team 1), Hero(
			Cassidy), Critical Hits)), Vector(10, 12, 19.500), 2, Do Not Clip, Visible To and String, Color(Team 1), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Critical hit accuracy: {0}%", Round To Integer(Player Hero Stat(
			Players In Slot(0, Team 1), Hero(Cassidy), Critical Hit Accuracy) * 100, Up)), Vector(10, 10, 19.500), 2, Do Not Clip,
			Visible To and String, Color(Team 1), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Shots hit: {0}/{1}", Player Hero Stat(Players In Slot(0, Team 1), Hero(
			Cassidy), Shots Hit), Player Hero Stat(Players In Slot(0, Team 1), Hero(Cassidy), Shots Fired)), Vector(10, 8, 19.500), 2,
			Do Not Clip, Visible To and String, Color(Team 1), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Weapon accuracy: {0}%", Round To Integer(Player Hero Stat(
			Players In Slot(0, Team 1), Hero(Cassidy), Weapon Accuracy) * 100, Up)), Vector(10, 6, 19.500), 2, Do Not Clip,
			Visible To and String, Color(Team 1), Visible Always);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Team"), 2), Vector(-10, 18, 19.500), 2.500, Do Not Clip,
			Visible To and String, Color(Team 2), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Team kills: {0}", Global.entire_team_kills[1]), Vector(-10, 15,
			19.500), 2, Do Not Clip, Visible To and String, Color(Team 2), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Critical hits: {0}", Player Hero Stat(Players In Slot(0, Team 2), Hero(
			Cassidy), Critical Hits)), Vector(-10, 12, 19.500), 2, Do Not Clip, Visible To and String, Color(Team 2), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Critical hit accuracy: {0}%", Round To Integer(Player Hero Stat(
			Players In Slot(0, Team 2), Hero(Cassidy), Critical Hit Accuracy) * 100, Up)), Vector(-10, 10, 19.500), 2, Do Not Clip,
			Visible To and String, Color(Team 2), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Shots hit: {0}/{1}", Player Hero Stat(Players In Slot(0, Team 2), Hero(
			Cassidy), Shots Hit), Player Hero Stat(Players In Slot(0, Team 2), Hero(Cassidy), Shots Fired)), Vector(-10, 8, 19.500), 2,
			Do Not Clip, Visible To and String, Color(Team 2), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Weapon accuracy: {0}%", Round To Integer(Player Hero Stat(
			Players In Slot(0, Team 2), Hero(Cassidy), Weapon Accuracy) * 100, Up)), Vector(-10, 6, 19.500), 2, Do Not Clip,
			Visible To and String, Color(Team 2), Visible Always);
	}
}

rule("HUD - game name")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Global.game_name, Null, Null, Top, 0, Color(Purple), Color(White), Color(White),
			Visible To, Visible Always);
	}
}

rule("HUD - scoreboard spacing")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String(" "), Left, -99999, Color(White), Color(White),
			Color(White), None, Visible Never);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String(" "), Left, -99999, Color(White), Color(White),
			Color(White), None, Visible Never);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String(" "), Right, -99999, Color(White), Color(White),
			Color(White), None, Visible Never);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String(" "), Right, -99999, Color(White), Color(White),
			Color(White), None, Visible Never);
	}
}

rule("HUD - Team 1 scoreboard")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Event Player)), Is Dummy Bot(
			Event Player) ? String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1) : Event Player, Custom String(
			"{0} / {1} / {2}", Player Stat(Event Player, Final Blows), Player Stat(Event Player, Deaths), Player Stat(Event Player,
			Hero Damage Dealt))), Null, Null, Left, Player Stat(Event Player, All Damage Dealt) * -0.010, Color(White), Color(White),
			Color(White), Visible To Sort Order String and Color, Visible Always);
	}
}

rule("HUD - Team 2 scoreboard")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Event Player)), Is Dummy Bot(
			Event Player) ? String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1) : Event Player, Custom String(
			"{0} / {1} / {2}", Player Stat(Event Player, Final Blows), Player Stat(Event Player, Deaths), Player Stat(Event Player,
			Hero Damage Dealt))), Null, Null, Right, Player Stat(Event Player, All Damage Dealt) * -0.010, Color(White), Color(White),
			Color(White), Visible To Sort Order String and Color, Visible Always);
	}
}

rule("HUD - notifications spacing")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String(" "), Left,
			Global.hud_notifications_sort_order - 1, Color(White), Color(White), Color(White), None, Visible Always);
	}
}

rule("Add last text (with expiration time) to player HUD notifications")
{
	event
	{
		Subroutine;
		AddLastTextToPlayerNotifications;
	}

	actions
	{
		Modify Player Variable(Event Player, hud_notifications, Append To Array, Total Time Elapsed + Global.hud_notifications_duration);
		Modify Player Variable(Event Player, hud_notifications, Append To Array, Last Text ID);
	}
}

rule("Remove expired player HUD notifications")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Count Of(Event Player.hud_notifications) > 0;
	}

	actions
	{
		While(Count Of(Event Player.hud_notifications));
			If(Event Player.hud_notifications[0] > Total Time Elapsed);
				Break;
			End;
			Destroy HUD Text(Event Player.hud_notifications[1]);
			Modify Player Variable(Event Player, hud_notifications, Remove From Array By Index, 0);
			Modify Player Variable(Event Player, hud_notifications, Remove From Array By Index, 0);
		End;
		Wait(Global.hud_notifications_duration / 5, Ignore Condition);
		Loop If Condition Is True;
	}
}

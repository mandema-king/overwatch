settings
{
	main
	{
		Description: "Aim practice vs dummy bots. Think fast when you spawn; any other controls are in top left of screen"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Spectators: 6
		Max Team 2 Players: 0
		Return To Lobby: Never
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Hero Limit: Off
			Respawn Time Scalar: 63%
		}
	}

	heroes
	{
		Team 1
		{
			Ability Cooldown Time: 60%
			Damage Received: 60%

			D.Va
			{
				Spawn Without Mech: On
				Ultimate Ability Self-Destruct: Off
			}

			Junkrat
			{
				No Ammunition Requirement: On
				Ultimate Ability RIP-Tire: Off
			}

			Symmetra
			{
				Sentry Turret: Off
				Ultimate Ability Photon Barrier: Off
			}
		}

		Team 2
		{
			Junkrat
			{
				No Ammunition Requirement: On
			}

			Mercy
			{
				Resurrect Cooldown Time: 25%
				Weapons Enabled: Caduceus Staff Only
			}

			Symmetra
			{
				Ultimate Ability Photon Barrier: Off
			}
		}

		General
		{
			Ammunition Clip Size Scalar: 101%
			No Ammunition Requirement: On
			Ultimate Generation: 500%

			Ana
			{
				No Ammunition Requirement: On
				Sleep Dart Cooldown Time: 29%
			}

			Ashe
			{
				No Ammunition Requirement: On
				Spawn With Ultimate Ready: On
				Ultimate Ability B.O.B.: Off
			}

			Baptiste
			{
				No Ammunition Requirement: On
			}

			Bastion
			{
				No Ammunition Requirement: On
				Reconfigure: Off
				Ultimate Ability Configuration: Tank: Off
			}

			Cassidy
			{
				Ammunition Clip Size Scalar: 201%
				No Ammunition Requirement: On
				Secondary Fire: Off
				Ultimate Ability Deadeye: Off
			}

			Doomfist
			{
				Ultimate Ability Meteor Strike: Off
			}

			Echo
			{
				No Ammunition Requirement: On
			}

			Genji
			{
				No Ammunition Requirement: On
			}

			Mei
			{
				Ice Wall: Off
				No Ammunition Requirement: On
				Primary Fire: Off
				Ultimate Ability Blizzard: Off
			}

			Pharah
			{
				Ultimate Ability Barrage: Off
			}

			Reaper
			{
				Ultimate Ability Death Blossom: Off
			}

			Roadhog
			{
				Chain Hook Cooldown Time: 26%
				Ultimate Ability Whole Hog: Off
			}

			Sigma
			{
				Ultimate Ability Gravitic Flux: Off
			}

			Soldier: 76
			{
				Ammunition Clip Size Scalar: 208%
				Ultimate Ability Tactical Visor: Off
			}

			Sombra
			{
				Ammunition Clip Size Scalar: 209%
				Hack Cooldown Time: 38%
				Ultimate Ability EMP: Off
			}

			Torbj√∂rn
			{
				Deploy Turret: Off
				No Ammunition Requirement: On
				Ultimate Ability Molten Core: Off
			}

			Tracer
			{
				Ammunition Clip Size Scalar: 202%
				Ultimate Generation - Combat Pulse Bomb: 41%
			}

			Widowmaker
			{
				Grappling Hook Cooldown Time: 0%
				No Ammunition Requirement: On
				Venom Mine: Off
			}

			Zarya
			{
				Primary Fire: Off
			}

			disabled heroes
			{
				Brigitte
				Moira
				Reinhardt
				Winston
				Wrecking Ball
			}
		}
	}
}

variables
{
	player:
		18: Immortal
}

rule("Message")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("'{0}' emote for Immortality", String("Thanks")), Null, Null, Left, 1, Color(Team 1),
			Color(White), Color(White), String, Default Visibility);
		Create HUD Text(Event Player, Custom String("'{0}' emote to switch heroes", String("Interact")), Null, Null, Left, 1, Color(
			Team 1), Color(White), Color(White), String, Default Visibility);
		Event Player.Immortal = False;
	}
}

rule("BOT create")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Cassidy), Team 2, 0, Global.P[1], Vector(0, 0, 0));
		Create Dummy Bot(Hero(Pharah), Team 2, 1, Global.P[2], Vector(0, 0, 0));
		Create Dummy Bot(Hero(Mercy), Team 2, 2, Global.P[2], Vector(0, 0, 0));
		Create Dummy Bot(Hero(Ashe), Team 2, 3, Global.P[3], Global.T[1]);
		Create Dummy Bot(Hero(Genji), Team 2, 4, Global.P[5], Vector(0, 0, 0));
		Create Dummy Bot(Hero(Reinhardt), Team 2, 5, Global.P[0], Global.T[1]);
	}
}

rule("BOT turn and shoot")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Ashe);
		Hero Of(Event Player) != Hero(Widowmaker);
		Hero Of(Event Player) != Hero(Ana);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Attacker)), 400, To World,
			Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(4, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("BOT jump")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is On Ground(Event Player) == True;
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Baptiste);
	}

	actions
	{
		Wait(Random Real(1, 3), Ignore Condition);
		Press Button(Event Player, Button(Jump));
	}
}

rule("BOT crouch")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is On Ground(Event Player) == True;
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Baptiste);
		Hero Of(Event Player) != Hero(Wrecking Ball);
	}

	actions
	{
		Wait(Random Real(1, 3), Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Loop;
	}
}

rule("BOT stop holding buttons")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Ability 1));
		Stop Holding Button(Event Player, Button(Ability 2));
	}
}

rule("BOT says hello BM")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(0.900, Ignore Condition);
		Press Button(Event Player, Button(Crouch));
		Wait(0.900, Ignore Condition);
		Press Button(Event Player, Button(Crouch));
		Wait(1, Ignore Condition);
		Communicate(Event Player, Hello);
		Stop Throttle In Direction(Event Player);
	}
}

rule("PLAYER immortal on")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Is Communicating(Event Player, Thanks) == True;
		Event Player.Immortal == False;
	}

	actions
	{
		Big Message(Event Player, String("{0}: {1}", Custom String("Immortality"), String("On")));
		Wait(2, Ignore Condition);
		Set Status(Event Player, Event Player, Phased Out, 9999);
		Event Player.Immortal = True;
	}
}

rule("PLAYER immortal off")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Is Communicating(Event Player, Thanks) == True;
		Event Player.Immortal == True;
	}

	actions
	{
		Big Message(Event Player, String("{0}: {1}", Custom String("Immortality"), String("Off")));
		Wait(2, Ignore Condition);
		Clear Status(Event Player, Phased Out);
		Event Player.Immortal = False;
	}
}

rule("PLAYER leech 50% dmg done")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Heal(Event Player, Event Player, Event Damage / 2);
	}
}

rule("RBOT E")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.600;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("RBOT shift")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.750;
		Hero Of(Event Player) != Hero(Wrecking Ball);
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(0.900, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("RBOT strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.500, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.500, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop;
	}
}

rule("RBOT change")
{
	event
	{
		Player Died;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(2.400, Ignore Condition);
		Teleport(Event Player, Global.P[0]);
		Start Forcing Player To Be Hero(Event Player, Random Value In Array(All Heroes));
	}
}

rule("RBOT W")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 5;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Attacker) >= 10;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(3, Ignore Condition);
		Stop Throttle In Direction(Event Player);
	}
}

rule("Rule 76")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Match Time(3599);
	}
}

rule("MCCREE strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("MCCREE roll")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.600;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("MCCREE change")
{
	event
	{
		Player Died;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(2.400, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, All Heroes);
	}
}

rule("MCCREE MOIRA dmg")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Hero Being Played(Hero(Moira), Team 2) == True;
	}

	actions
	{
		disabled Skip If(Normalized Health(Event Player) >= 0.950, 4);
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("MCCREE BAPTISTE jump")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Hero Being Played(Hero(Baptiste), Team 2) == True;
	}

	actions
	{
		Wait(Random Real(2, 3), Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(2, Ignore Condition);
		Start Holding Button(Event Player, Button(Jump));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Stop Holding Button(Event Player, Button(Jump));
		Loop If Condition Is True;
	}
}

rule("MCCREE SYMMETRA dmg")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("PHARAH take off")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Is In Air(Event Player) || Is Moving(Event Player)) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("PHARAH air strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(1, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(1, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("PHARAH control jets")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Wait(0.775, Ignore Condition);
		Start Holding Button(Event Player, Button(Jump));
		Wait(0.775, Ignore Condition);
		Stop Holding Button(Event Player, Button(Jump));
		Loop If Condition Is True;
	}
}

rule("PHARAH thrusters")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("PHARAH shoot")
{
	event
	{
		Player Took Damage;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Attacker), 500, To World, Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(5, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("PHARAH after rez")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Moving(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("PHARAH mad")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 2;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Players In Slot(1, Team 2), Direction Towards(Eye Position(Players In Slot(1, Team 2)), Attacker), 600, To World,
			Direction and Turn Rate);
		Start Holding Button(Players In Slot(1, Team 2), Button(Primary Fire));
		Wait(5, Ignore Condition);
		disabled Stop Facing(Players On Hero(Hero(Pharah), Team 2));
		Stop Holding Button(Players In Slot(1, Team 2), Button(Primary Fire));
		Press Button(Players In Slot(1, Team 2), Button(Ability 2));
	}
}

rule("MERCY stare")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Players In Slot(1, Team 2)), 400, To World,
			Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("MERCY fly to")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Players In Slot(1, Team 2)) >= 10;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Ability 1));
		Wait(Random Real(2, 3.500), Ignore Condition);
		Stop Holding Button(Event Player, Button(Ability 1));
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Jump));
		Wait(Random Real(1.500, 2.500), Ignore Condition);
		Stop Holding Button(Event Player, Button(Jump));
		Loop If Condition Is True;
	}
}

rule("MERCY strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.500, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.500, 2), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop;
	}
}

rule("MERCY movement")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Players On Hero(Hero(Pharah), Team 2)) >= 8;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(1.500, 2.500), Ignore Condition);
		disabled Stop Throttle In Direction(Event Player);
		Loop If Condition Is True;
	}
}

rule("MERCY damage boost")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) >= 0.800;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Players In Slot(2, Team 2), Button(Secondary Fire));
		Press Button(Players On Hero(Hero(Mercy), Team 2), Button(Ultimate));
		Wait(0.500, Ignore Condition);
		Stop Holding Button(Players On Hero(Hero(Mercy), Team 2), Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("MERCY rez")
{
	event
	{
		Player Died;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Players On Hero(Hero(Mercy), Team 2), Event Player) <= 6;
	}

	actions
	{
		Start Throttle In Direction(Players In Slot(2, Team 2), Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Start Holding Button(Players In Slot(2, Team 2), Button(Ability 2));
		Start Holding Button(Players In Slot(2, Team 2), Button(Jump));
		Wait(3, Ignore Condition);
		Stop Holding Button(Players In Slot(2, Team 2), Button(Ability 2));
		Stop Holding Button(Players In Slot(2, Team 2), Button(Jump));
		Stop Throttle In Direction(Players In Slot(2, Team 2));
		Loop If Condition Is True;
	}
}

rule("ASHE dynamite")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.600;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("ASHE strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop;
	}
}

rule("ASHE facing")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Attacker)), 400, To World,
			Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(5, Ignore Condition);
		disabled Stop Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("ASHE shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.950;
		Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Closest Player To(Event Player, Team 1)), All Players(Team 1),
			Event Player, True) == True;
		Hero Of(Event Player) != Hero(Hanzo);
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ASHE HANZO shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.950;
		Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Closest Player To(Event Player, Team 1)), All Players(Team 1),
			Event Player, True) == True;
		Hero Of(Event Player) == Hero(Hanzo);
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ASHE change")
{
	event
	{
		Player Died;
		Team 2;
		Slot 3;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(2.400, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, All Heroes);
	}
}

rule("GENJI look")
{
	event
	{
		Player Took Damage;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Attacker)), 600, To World,
			Direction and Turn Rate);
		Press Button(Event Player, Button(Jump));
		Wait(1, Ignore Condition);
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(1, Ignore Condition);
		Stop Throttle In Direction(Event Player);
	}
}

rule("GENJI strafe")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Start Throttle In Direction(Event Player, Right, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("GENJI deflect")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.500;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("GENJI right clicks")
{
	event
	{
		Player Took Damage;
		Team 2;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Attacker) <= 8;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Event Player, Button(Secondary Fire));
		Press Button(Event Player, Button(Ability 1));
		Wait(3, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("GENJI double jump")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Wait(Random Real(2, 3), Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Wait(0.500, Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Loop;
	}
}

rule("GENJI change")
{
	event
	{
		Player Died;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Stop Holding Button(Players In Slot(4, Team 2), Button(Secondary Fire));
		Wait(2.400, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, All Heroes);
		Skip If(Hero Of(Event Player) == Hero(Genji), 1);
		Stop Forcing Player To Be Hero(Event Player);
	}
}

rule("DOOM look")
{
	event
	{
		Player Took Damage;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Attacker), 600, To World, Direction and Turn Rate);
		Press Button(Event Player, Button(Jump));
		Wait(3, Ignore Condition);
	}
}

rule("DOOM e")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Firing Secondary(Event Player) == False;
		Distance Between(Event Player, Player Closest To Reticle(Event Player, Team 1)) <= 20;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(4, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("DOOM shift")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Firing Secondary(Event Player) == False;
		Distance Between(Event Player, Player Closest To Reticle(Event Player, Team 1)) <= 8;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(3, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("DOOM punch")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Slot 4;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Hero(Genji);
	}

	actions
	{
		Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(3, Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Stop Throttle In Direction(Event Player);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("DOOM ult")
{
	event
	{
		Player Took Damage;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.300;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("Rule 76")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Match Time(3599);
	}
}

rule("Rule 55")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Kill(Event Player, Null);
	}
}

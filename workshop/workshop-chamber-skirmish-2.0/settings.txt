settings
{
	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Limit Roles: 2 Of Each Role Per Team
		}
	}
}

variables
{
	global:
		0: rounds_won
		1: game_name
		2: team_1_spawn_direction
		3: team_2_spawn_direction
		4: team_1_spawn_positions
		5: team_2_spawn_positions
		6: hud_notifications
		7: hud_notifications_duration
		8: hud_notifications_sort_order

	player:
		0: hud_notifications
}

subroutines
{
	0: AddLastTextToGlobalNotifications
	1: AddLastTextToPlayerNotifications
}

rule("Workshop settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.hud_notifications_duration = Workshop Setting Integer(Custom String("HUD - Notifications"), Custom String(
			"Notification duration [seconds]"), 5, 5, 20, 10);
	}
}

rule("Initialize global variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.rounds_won = Array(0, 0);
		Global.game_name = Custom String("Workshop Chamber - Skirmish 2.0");
		Global.hud_notifications = Empty Array;
		Global.hud_notifications_sort_order = 1000;
		Global.team_1_spawn_direction = Vector(-1, 0, 0);
		Global.team_2_spawn_direction = Vector(1, 0, 0);
		Global.team_1_spawn_positions[0] = Vector(15, 0, 0);
		Global.team_1_spawn_positions[1] = Vector(15, 0, -1);
		Global.team_1_spawn_positions[2] = Vector(15, 0, 1);
		Global.team_1_spawn_positions[3] = Vector(16, 0, 0);
		Global.team_1_spawn_positions[4] = Vector(16, 0, -1);
		Global.team_1_spawn_positions[5] = Vector(16, 0, 1);
		Global.team_2_spawn_positions[0] = Vector(-15, 0, 0);
		Global.team_2_spawn_positions[1] = Vector(-15, 0, -1);
		Global.team_2_spawn_positions[2] = Vector(-15, 0, 1);
		Global.team_2_spawn_positions[3] = Vector(-16, 0, 0);
		Global.team_2_spawn_positions[4] = Vector(-16, 0, -1);
		Global.team_2_spawn_positions[5] = Vector(-16, 0, 1);
	}
}

rule("Initialize player variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.hud_notifications = Empty Array;
	}
}

disabled rule("When player has spawned, initialize team spawn positions")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		If(Team Of(Event Player) == Team 1);
			Global.team_1_spawn_positions[Slot Of(Event Player)] = Position Of(Event Player);
		Else If(Team Of(Event Player) == Team 2);
			Global.team_2_spawn_positions[Slot Of(Event Player)] = Position Of(Event Player);
	}
}

disabled rule("Create bots")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Global.team_2_spawn_positions) == Number Of Slots(Team 2);
	}

	actions
	{
		Create Dummy Bot(Hero(Ana), Team 1, 0, Global.team_1_spawn_positions[0], Global.team_1_spawn_direction);
		Create Dummy Bot(Hero(D.Va), Team 1, 1, Global.team_1_spawn_positions[1], Global.team_1_spawn_direction);
		Create Dummy Bot(Hero(Orisa), Team 1, 2, Global.team_1_spawn_positions[2], Global.team_1_spawn_direction);
		Create Dummy Bot(Hero(Cassidy), Team 1, 3, Global.team_1_spawn_positions[3], Global.team_1_spawn_direction);
		Create Dummy Bot(Hero(Ashe), Team 1, 4, Global.team_1_spawn_positions[4], Global.team_1_spawn_direction);
		Create Dummy Bot(Hero(Baptiste), Team 1, 5, Global.team_1_spawn_positions[5], Global.team_1_spawn_direction);
		Create Dummy Bot(Hero(Ana), Team 2, 0, Global.team_2_spawn_positions[0], Global.team_2_spawn_direction);
		Create Dummy Bot(Hero(D.Va), Team 2, 1, Global.team_2_spawn_positions[1], Global.team_2_spawn_direction);
		Create Dummy Bot(Hero(Orisa), Team 2, 2, Global.team_2_spawn_positions[2], Global.team_2_spawn_direction);
		Create Dummy Bot(Hero(Cassidy), Team 2, 3, Global.team_2_spawn_positions[3], Global.team_2_spawn_direction);
		Create Dummy Bot(Hero(Ashe), Team 2, 4, Global.team_2_spawn_positions[4], Global.team_2_spawn_direction);
		Create Dummy Bot(Hero(Baptiste), Team 2, 5, Global.team_2_spawn_positions[5], Global.team_2_spawn_direction);
	}
}

rule("When all players on a team are dead, increment \"team kills\" for other team")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		(Is True For Any(All Players(Team 1), Has Spawned(Current Array Element)) && Is True For Any(All Players(Team 2), Has Spawned(
			Current Array Element))) == True;
		(Count Of(All Living Players(Team 1)) == 0 || Count Of(All Living Players(Team 2)) == 0) == True;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Team kill"));
		If(Count Of(All Living Players(Team 1)) == 0);
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("Team 2 won the round"), Left,
				Global.hud_notifications_sort_order, Color(White), Color(White), Color(Team 2), Visible To, Visible Always);
			Call Subroutine(AddLastTextToGlobalNotifications);
			Global.rounds_won[1] += 1;
		End;
		If(Count Of(All Living Players(Team 2)) == 0);
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("Team 1 won the round"), Left,
				Global.hud_notifications_sort_order, Color(White), Color(White), Color(Team 1), Visible To, Visible Always);
			Call Subroutine(AddLastTextToGlobalNotifications);
			Global.rounds_won[0] += 1;
		End;
		Wait(6, Ignore Condition);
	}
}

rule("Global scoreboard")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Team"), 1), Vector(10, 18, 19.500), 2.500, Do Not Clip,
			Visible To and String, Color(Team 1), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Rounds won: {0}", Global.rounds_won[0]), Vector(10, 15, 19.500), 2,
			Do Not Clip, Visible To and String, Color(Team 1), Visible Always);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Team"), 2), Vector(-10, 18, 19.500), 2.500, Do Not Clip,
			Visible To and String, Color(Team 2), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Rounds won: {0}", Global.rounds_won[1]), Vector(-10, 15, 19.500), 2,
			Do Not Clip, Visible To and String, Color(Team 2), Visible Always);
	}
}

rule("HUD - game name")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Global.game_name, Null, Null, Top, 0, Color(Purple), Color(White), Color(White),
			Visible To, Visible Always);
	}
}

rule("HUD - scoreboard spacing")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String(" "), Left, -99999, Color(White), Color(White),
			Color(White), Visible To, Visible Never);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String(" "), Left, -99999, Color(White), Color(White),
			Color(White), Visible To, Visible Never);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String(" "), Right, -99999, Color(White), Color(White),
			Color(White), Visible To, Visible Never);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String(" "), Right, -99999, Color(White), Color(White),
			Color(White), Visible To, Visible Never);
	}
}

rule("HUD - Team 1 scoreboard")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Event Player)), Is Dummy Bot(
			Event Player) ? String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1) : Event Player, Custom String(
			"{0} / {1} / {2}", Player Stat(Event Player, Final Blows), Player Stat(Event Player, Deaths), Player Stat(Event Player,
			Hero Damage Dealt))), Null, Null, Left, Player Stat(Event Player, All Damage Dealt) * -0.010, Color(White), Color(White),
			Color(White), Visible To Sort Order String and Color, Visible Always);
	}
}

rule("HUD - Team 2 scoreboard")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Event Player)), Is Dummy Bot(
			Event Player) ? String("{0} {1}", Custom String("Bot"), Slot Of(Event Player) + 1) : Event Player, Custom String(
			"{0} / {1} / {2}", Player Stat(Event Player, Final Blows), Player Stat(Event Player, Deaths), Player Stat(Event Player,
			Hero Damage Dealt))), Null, Null, Right, Player Stat(Event Player, All Damage Dealt) * -0.010, Color(White), Color(White),
			Color(White), Visible To Sort Order String and Color, Visible Always);
	}
}

rule("HUD - notifications spacing")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String(" "), Left,
			Global.hud_notifications_sort_order - 1, Color(White), Color(White), Color(White), Visible To, Visible Always);
	}
}

rule("Add last text (with expiration time) to global HUD notifications")
{
	event
	{
		Subroutine;
		AddLastTextToGlobalNotifications;
	}

	actions
	{
		Modify Global Variable(hud_notifications, Append To Array, Total Time Elapsed + Global.hud_notifications_duration);
		Modify Global Variable(hud_notifications, Append To Array, Last Text ID);
	}
}

rule("Add last text (with expiration time) to player HUD notifications")
{
	event
	{
		Subroutine;
		AddLastTextToPlayerNotifications;
	}

	actions
	{
		Modify Player Variable(Event Player, hud_notifications, Append To Array, Total Time Elapsed + Global.hud_notifications_duration);
		Modify Player Variable(Event Player, hud_notifications, Append To Array, Last Text ID);
	}
}

rule("Remove expired global HUD notifications")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		While(Count Of(Global.hud_notifications));
			If(Global.hud_notifications[0] > Total Time Elapsed);
				Break;
			End;
			Destroy HUD Text(Global.hud_notifications[1]);
			Modify Global Variable(hud_notifications, Remove From Array By Index, 0);
			Modify Global Variable(hud_notifications, Remove From Array By Index, 0);
		End;
		Wait(Global.hud_notifications_duration / 5, Ignore Condition);
		Loop;
	}
}

rule("Remove expired player HUD notifications")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		While(Count Of(Event Player.hud_notifications));
			If(Event Player.hud_notifications[0] > Total Time Elapsed);
				Break;
			End;
			Destroy HUD Text(Event Player.hud_notifications[1]);
			Modify Player Variable(Event Player, hud_notifications, Remove From Array By Index, 0);
			Modify Player Variable(Event Player, hud_notifications, Remove From Array By Index, 0);
		End;
		Wait(Global.hud_notifications_duration / 5, Ignore Condition);
		Loop;
	}
}

settings
{
	main
	{
		Description: "Demonstrates HUD notifications (temporary messages visible to players and/or spectators)"
		Mode Name: "Proof of Concept"
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Limit Roles: 2 Of Each Role Per Team
		}
	}
}

variables
{
	global:
		0: game_name
		1: hud_notifications_duration
		2: hud_notifications_sort_order
		3: hud_notifications

	player:
		0: hud_notifications
}

subroutines
{
	0: AddLastTextToPlayerNotifications
	1: AddLastTextToGlobalNotifications
}

rule("Workshop settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.hud_notifications_duration = Workshop Setting Integer(Custom String("HUD - Notifications"), Custom String(
			"Notification duration [seconds]"), 5, 5, 20, 10);
	}
}

rule("Initialize global variables")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Global.game_name = Custom String("HUD Notifications");
		Global.hud_notifications = Empty Array;
		Global.hud_notifications_sort_order = 1000;
	}
}

rule("Initialize player variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.hud_notifications = Empty Array;
	}
}

rule("When player has spawned, show sample notifications")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} has spawned", Hero Icon String(Hero Of(Event Player)),
			Event Player), Left, Global.hud_notifications_sort_order, Color(White), Color(White), Color(White), Visible To and String,
			Visible Always);
		Call Subroutine(AddLastTextToGlobalNotifications);
		Create HUD Text(Event Player, Null, Null, Custom String("Sample notification #1"), Left, Global.hud_notifications_sort_order,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Call Subroutine(AddLastTextToPlayerNotifications);
		Create HUD Text(Event Player, Null, Null, Custom String("Sample notification #2"), Left, Global.hud_notifications_sort_order,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Call Subroutine(AddLastTextToPlayerNotifications);
		Create HUD Text(Event Player, Null, Null, Custom String("Sample warning #1"), Left, Global.hud_notifications_sort_order, Color(
			White), Color(White), Color(Yellow), Visible To and String, Default Visibility);
		Call Subroutine(AddLastTextToPlayerNotifications);
		Create HUD Text(Event Player, Null, Null, Custom String("Sample notification #3"), Left, Global.hud_notifications_sort_order,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Call Subroutine(AddLastTextToPlayerNotifications);
	}
}

rule("When player holds primary fire button, show sample notification")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("Holding primary fire button"), Left, Global.hud_notifications_sort_order,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Call Subroutine(AddLastTextToPlayerNotifications);
	}
}

rule("When player holds secondary fire button, show sample notification")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("Holding secondary fire button"), Left,
			Global.hud_notifications_sort_order, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Call Subroutine(AddLastTextToPlayerNotifications);
	}
}

rule("When player holds melee button, show sample notification")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("Holding melee button"), Left, Global.hud_notifications_sort_order, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Call Subroutine(AddLastTextToPlayerNotifications);
	}
}

rule("When player holds reload button, show sample notification")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("Holding reload button"), Left, Global.hud_notifications_sort_order, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Call Subroutine(AddLastTextToPlayerNotifications);
	}
}

rule("When player dies, show global notification")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} was killed by {1}", Event Player, Attacker), Left,
			Global.hud_notifications_sort_order, Color(White), Color(White), Color(White), Visible To, Visible Always);
		Call Subroutine(AddLastTextToGlobalNotifications);
	}
}

rule("HUD - game name")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Global.game_name, Null, Null, Top, 0, Color(Purple), Color(White), Color(White),
			Visible To, Visible Always);
	}
}

rule("Add last text (with expiration time) to global HUD notifications")
{
	event
	{
		Subroutine;
		AddLastTextToGlobalNotifications;
	}

	actions
	{
		Modify Global Variable(hud_notifications, Append To Array, Total Time Elapsed + Global.hud_notifications_duration);
		Modify Global Variable(hud_notifications, Append To Array, Last Text ID);
	}
}

rule("Add last text (with expiration time) to player HUD notifications")
{
	event
	{
		Subroutine;
		AddLastTextToPlayerNotifications;
	}

	actions
	{
		Modify Player Variable(Event Player, hud_notifications, Append To Array, Total Time Elapsed + Global.hud_notifications_duration);
		Modify Player Variable(Event Player, hud_notifications, Append To Array, Last Text ID);
	}
}

rule("Remove expired global HUD notifications")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Global.hud_notifications) > 0;
	}

	actions
	{
		While(Count Of(Global.hud_notifications));
			If(Global.hud_notifications[0] > Total Time Elapsed);
				Break;
			End;
			Destroy HUD Text(Global.hud_notifications[1]);
			Modify Global Variable(hud_notifications, Remove From Array By Index, 0);
			Modify Global Variable(hud_notifications, Remove From Array By Index, 0);
		End;
		Wait(Global.hud_notifications_duration / 5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Remove expired player HUD notifications")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Count Of(Event Player.hud_notifications) > 0;
	}

	actions
	{
		While(Count Of(Event Player.hud_notifications));
			If(Event Player.hud_notifications[0] > Total Time Elapsed);
				Break;
			End;
			Destroy HUD Text(Event Player.hud_notifications[1]);
			Modify Player Variable(Event Player, hud_notifications, Remove From Array By Index, 0);
			Modify Player Variable(Event Player, hud_notifications, Remove From Array By Index, 0);
		End;
		Wait(Global.hud_notifications_duration / 5, Ignore Condition);
		Loop If Condition Is True;
	}
}
